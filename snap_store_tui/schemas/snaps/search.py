# generated by datamodel-codegen:
#   filename:  snaps_find_schema.json
#   timestamp: 2024-09-17T01:18:24+00:00


from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field

from snap_store_tui.schemas.snaps.categories import Category, Media

VALID_SEARCH_CATEGORY_FIELDS = [
    "base",
    "categories",
    "channel",
    "common-ids",
    "confinement",
    "contact",
    "description",
    "download",
    "license",
    "media",
    "prices",
    "private",
    "publisher",
    "revision",
    "store-url",
    "summary",
    "title",
    "type",
    "version",
    "website",
]


class ErrorListItem(BaseModel):
    model_config = ConfigDict(extra="forbid", exclude_unset=True)

    code: str
    message: str


class Download(BaseModel):
    model_config = ConfigDict(extra="forbid", exclude_unset=True)

    size: float


class Revision(BaseModel):
    model_config = ConfigDict(extra="forbid", exclude_unset=True)

    base: Optional[str] = None
    channel: Optional[str] = None
    common_ids: Optional[List[str]] = Field(None, alias="common-ids")
    confinement: Optional[str] = None
    download: Optional[Download] = None
    revision: Optional[float] = None
    type: Optional[str] = None
    version: Optional[str] = None


class Publisher(BaseModel):
    model_config = ConfigDict(extra="forbid", exclude_unset=True)

    display_name: str = Field(..., alias="display-name")
    id: str
    username: str
    validation: Optional[str] = None


class Snap(BaseModel):
    model_config = ConfigDict(extra="forbid", exclude_unset=True)

    categories: Optional[List[Category]] = None
    contact: Optional[str] = None
    description: Optional[str] = None
    license: Optional[str] = None
    links: Optional[Dict[str, Any]] = None
    media: Optional[List[Media]] = None
    prices: Optional[Dict[str, Any]] = None
    private: Optional[bool] = None
    publisher: Optional[Publisher] = None
    store_url: Optional[str] = Field(None, alias="store-url")
    summary: Optional[str] = None
    title: Optional[str] = None
    website: Optional[str] = None


class SearchResult(BaseModel):
    model_config = ConfigDict(extra="forbid", exclude_unset=True, exclude_none=True)

    name: str
    revision: Optional[Revision] = None
    snap: Snap
    snap_id: str = Field(..., alias="snap-id")


class SearchResponse(BaseModel):
    model_config = ConfigDict(extra="forbid", exclude_unset=True, exclude_none=True)

    error_list: Optional[List[ErrorListItem]] = Field(None, alias="error-list")
    results: List[SearchResult]
